from aiogram import Dispatcher, Bot
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery
from aiogram import F
from pprint import pprint
from config import Config
from db import *
from filters import *
from functions import show_pos_letters
from lexicon import RU


from kb import *


CONF = Config()
_db = CONF.db['db_file']
bot = Bot(token=CONF.token)
dp = Dispatcher()


@dp.message(Command(commands=['start']))
async def process_start_command(message: Message):
    # pprint(message.model_dump_json(indent=4, exclude_none=True))
    if await check_exist_user(_db, message.from_user.id):
        await update_activity_user(_db, message)
        await message.answer(RU['greeting_repeat'])
    else:
        await insert_new_user(_db, message)
        await message.answer(RU['greeting'])


@dp.message(Command(commands=['guess']))
async def process_run_guess(message: Message):
    if await check_active_session(_db, message):
        await message.answer(text='–°–µ—Å—Å–∏—è –±–æ–¥–±–æ—Ä–∞ —Å–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞')
    else:
        await message.answer(
            text=RU['kb_choice_length'],
            reply_markup=gen_kb_set_lenght()
            )


@dp.callback_query(IsGetLengthWord())
async def process_help_command(callback: CallbackQuery):
    if await check_active_session(_db, callback):
        print('–°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞')
    else:
        await create_session(_db, callback) # —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        await create_attempt(_db, callback) # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É
        await callback.message.edit_text(
            text=RU['kb_exc_0'],
            reply_markup=gen_kb_letters('rem')
            )


@dp.callback_query(IsRemButton())
async def get_excluded_letter(callback: CallbackQuery, let):
    '''
    –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –±—É–∫–≤—ã —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    '''
    chars_excluded = await get_letters(_db, callback)
    if chars_excluded:
        # –ü–æ–≤—Ç–æ—Ä–æ–Ω—ã–π –≤—ã–±–æ—Ä –±—É–∫–≤—ã
        if let in chars_excluded:
            await callback.answer(f'–ë—É–∫–≤–∞ *{let}* —É–∂–µ –±—ã–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞')
            letters = chars_excluded
            await callback.message.edit_text(
                RU['kb_exc_head'] +
                f'{", ".join(letters)}' +
                RU['kb_exc_footer'],
                reply_markup=callback.message.reply_markup)
        # –ü–µ—Ä–≤–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –±—É–∫–≤—ã
        else:
            await callback.answer(f'–î–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–∞ –±—É–∫–≤–∞ *{let}*')
            letters = chars_excluded + let
    else:
        letters = let
    await insert_chars_to_attempt(_db, callback, letters)
    await callback.message.edit_text(
        RU['kb_exc_head'] +
        f'{", ".join(letters)}' +
        RU['kb_exc_footer'],
        reply_markup=callback.message.reply_markup)


@dp.callback_query(IsCncRemButton())
async def cancel_last_rem_letter(callback: CallbackQuery):
    '''
    –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏—Å–∫–ª—é—á–∞–µ–º—É—é –±—É–∫–≤—É
    '''
    chars_excluded = await get_letters(_db, callback)
    if chars_excluded:
        await callback.answer(f'–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –±—É–∫–≤–∞ *{chars_excluded[-1]}*')
        await insert_chars_to_attempt(_db, callback, chars_excluded[:-1])
        await callback.message.edit_text(
            RU['kb_exc_head'] +
            f'{", ".join(chars_excluded[:-1])}' +
            RU['kb_exc_footer'],
            reply_markup=callback.message.reply_markup)
    else:
        await callback.answer(f'–°–ø–∏—Å–æ–∫ –±—É–∫–≤ –ø—É—Å—Ç')


@dp.callback_query(IsRstRemButton())
async def reset_last_rem_letter(callback: CallbackQuery):
    '''
    –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–≤
    '''
    chars_excluded = await get_letters(_db, callback)
    if chars_excluded:
        await callback.answer(f'–°–ø–∏—Å–æ–∫ –±—É–∫–≤ –æ—á–∏—â–µ–Ω!')
        await insert_chars_to_attempt(_db, callback, '')
        await callback.message.edit_text(
            RU['kb_exc_head'] +
            RU['kb_exc_footer'],
            reply_markup=callback.message.reply_markup)
    else:
        await callback.answer(f'–°–ø–∏—Å–æ–∫ –±—É–∫–≤ –ø—É—Å—Ç')


@dp.callback_query(IsAgrRemButton())
async def agree_excluded_letters(callback: CallbackQuery):
    await callback.message.edit_text(
        text=f'‚ú≥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ'
              '\n\n–≤—ã–±–µ—Ä–∏ –±—É–∫–≤—ã –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ –∏ –Ω–∞–∂–º–∏ –ü—Ä–∏–Ω—è—Ç—å',
        reply_markup=gen_kb_letters('add')
        )






@dp.callback_query(IsAddButton())
async def get_included_letter(callback: CallbackQuery, let):
    chars_included = await get_letters(_db, callback)
    chars_excluded = await get_letters_excluded(_db, callback)
    length = await get_length_word(_db, callback)


    if chars_excluded and let in chars_excluded:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –±—É–∫–≤—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        await callback.answer(f'–ë—É–∫–≤–∞ *{let}* –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö')
    elif chars_included and length == len(chars_included):
        await callback.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ')
    else:
        if chars_included:
            if let in chars_included:
                await callback.answer(f'–ë—É–∫–≤–∞ *{let}* —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
                letters = chars_included
            else:
                letters = chars_included + let
                await callback.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –±—É–∫–≤–∞ *{let}*')
        else:
            letters = let
        await insert_chars_to_attempt(_db, callback, letters)
        await callback.message.edit_text(
            f'‚ú≥Ô∏è –ë—É–∫–≤—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å–ª–æ–≤–µ: {", ".join(sorted(letters))}'
            '\n\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–∏–Ω—è—Ç—å',
            reply_markup=callback.message.reply_markup)


@dp.callback_query(IsCncAddButton())
async def cancel_last_add_letter(callback: CallbackQuery):
    '''
    –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –±—É–∫–≤—É
    '''
    chars_included = await get_letters(_db, callback)
    if chars_included:
        await callback.answer(f'–í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –±—É–∫–≤–∞ *{chars_included[-1]}*')
        await insert_chars_to_attempt(_db, callback, chars_included[:-1])
        await callback.message.edit_text(
            f'‚ú≥Ô∏è –ë—É–∫–≤—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å–ª–æ–≤–µ: {", ".join(sorted(chars_included[:-1]))}'
            '\n\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–∏–Ω—è—Ç—å',
            reply_markup=callback.message.reply_markup)
    else:
        await callback.answer(f'–°–ø–∏—Å–æ–∫ –±—É–∫–≤ –ø—É—Å—Ç')


@dp.callback_query(IsRstAddButton())
async def reset_last_add_letter(callback: CallbackQuery):
    '''
    –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±—É–∫–≤
    '''
    chars_included = await get_letters(_db, callback)
    if chars_included:
        await callback.answer(f'–°–ø–∏—Å–æ–∫ –±—É–∫–≤ –æ—á–∏—â–µ–Ω!')
        await insert_chars_to_attempt(_db, callback, '')
        await callback.message.edit_text(
            '‚ú≥Ô∏è –ë—É–∫–≤—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ —Å–ª–æ–≤–µ: '
            '\n\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–∏–Ω—è—Ç—å',
            reply_markup=callback.message.reply_markup)
    else:
        await callback.answer(f'–°–ø–∏—Å–æ–∫ –±—É–∫–≤ –ø—É—Å—Ç')


@dp.callback_query(IsAgrAddButton())
async def agree_excluded_letters(callback: CallbackQuery):
    chars_included = await get_letters(_db, callback)
    await callback.message.edit_text(
        text='‚ú≥Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏–∑–≤–µ—Å—Ç–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–π —ç—Ç–æ–π '
             '–±—É–∫–≤—ã —Ç–æ—á–Ω–æ –Ω–µ—Ç\n\n–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–∏–Ω—è—Ç—å',
        # np = non-position
        reply_markup=gen_kb_letters_in(chars_included, 'np')
        )







@dp.callback_query(IsNonposLetterButton())
async def press_nonpos_button(callback: CallbackQuery, let):
    length = await get_length_word(_db, callback)
    await callback.message.edit_text(
        text=f'üìå –í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –≥–¥–µ –Ω–µ—Ç –±—É–∫–≤—ã {let}',
        reply_markup=gen_kb_line(length, 'np', let)
    )


@dp.callback_query(IsNonposNumberButton())
async def press_nonpos_num_button(callback: CallbackQuery):
    chars_included = await get_letters(_db, callback)
    letters = await get_pos_letters(_db, callback)
    pos_letters = show_pos_letters(letters)
    if letters and callback.data.split('_')[-1] in letters.split(':'):
        await callback.answer(text='–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏')
        await callback.message.edit_text(
            text='üìå –ë—É–∫–≤—ã –Ω–µ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö\n'
                f'{pos_letters}',
            reply_markup=gen_kb_letters_in(chars_included, 'np')
        )
    else:
        await insert_positions_to_attempt(_db, callback)    
        letters = await get_pos_letters(_db, callback)
        pos_letters = show_pos_letters(letters)
        await callback.message.edit_text(
            text='üìå –ë—É–∫–≤—ã –Ω–µ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö\n'
                f'{pos_letters}',
            reply_markup=gen_kb_letters_in(chars_included, 'np')
        )


@dp.callback_query(IsRstNposButton())
async def press_nonpos_rst_button(callback: CallbackQuery):
    await reset_positions_to_attempt(_db, callback)
    chars_included = await get_letters(_db, callback)
    await callback.message.edit_text(
        text='üìå –ë—É–∫–≤—ã –Ω–µ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö\n\n',
        # np = non-position
        reply_markup=gen_kb_letters_in(chars_included, 'np')
        )


@dp.callback_query(IsAgrNposButton())
async def agree_nonpos_letters(callback: CallbackQuery):
    chars_included = await get_letters(_db, callback)
    await callback.message.edit_text(
        text='üìå –í—ã–±–∏—Ä–∞–µ–º –±—É–∫–≤—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏–∑–≤–µ—Å—Ç–Ω–∞ –ø–æ–∑–∏—Ü–∏—è\n',
        # ip = in-position
        reply_markup=gen_kb_letters_in(chars_included, 'ip')
    )


@dp.callback_query(IsPosLetterButton())
async def press_pos_button(callback: CallbackQuery, let):
    length = await get_length_word(_db, callback)
    await callback.message.edit_text(
        text=f'üìå –í—ã–±–µ—Ä–∏ –ø–æ–∑–∏—Ü–∏—é –±—É–∫–≤—ã {let}',
        reply_markup=gen_kb_line(length, 'ip', let)
    )


@dp.callback_query(IsPosNumberButton())
async def press_pos_num_button(callback: CallbackQuery):
    chars_included = await get_letters(_db, callback)
    letters = await get_pos_letters(_db, callback)
    pos_letters = show_pos_letters(letters)
    non_letters = await get_pos_letters(_db, callback, with_callback=False, suf='np')
    if letters and callback.data.split('_')[-1] in letters.split(':'):
        await callback.answer(text='–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏')
        await callback.message.edit_text(
            text='üìå –í—ã–±–∏—Ä–∞–µ–º –±—É–∫–≤—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏–∑–≤–µ—Å—Ç–Ω–∞ –ø–æ–∑–∏—Ü–∏—è\n'
                f'{pos_letters}',
            reply_markup=gen_kb_letters_in(chars_included, 'ip')
        )
    elif callback.data.split('_')[-1] in non_letters:
        await callback.answer(text='–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –Ω–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏')
        await callback.message.edit_text(
            text='üìå –í—ã–±–∏—Ä–∞–µ–º –±—É–∫–≤—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏–∑–≤–µ—Å—Ç–Ω–∞ –ø–æ–∑–∏—Ü–∏—è\n'
                f'{pos_letters}',
            reply_markup=gen_kb_letters_in(chars_included, 'ip')
        )
    else:
        await insert_positions_to_attempt(_db, callback)    
        letters = await get_pos_letters(_db, callback)
        pos_letters = show_pos_letters(letters)
        await callback.message.edit_text(
            text='üìå –í—ã–±–∏—Ä–∞–µ–º –±—É–∫–≤—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏–∑–≤–µ—Å—Ç–Ω–∞ –ø–æ–∑–∏—Ü–∏—è\n'
                f'{pos_letters}',
            reply_markup=gen_kb_letters_in(chars_included, 'ip')
        )


@dp.callback_query(IsAgrPosButton())
async def agree_pos_letters(callback: CallbackQuery):
    length = await get_length_word(_db, callback)
    data = await get_all_data_attempt(_db, callback)
    abc = await get_words_from_dict(_db, length)
    # res = {}
    # if data.get('ex'):
    #     res['ex'] = f'[^{data["ex"] + data["ex"].upper()}]' * length
    # if data.get('in'):
    #     res['in'] = f'[{data["in"] + data["in"].upper()}]' * length
    # if data.get('np'):
    #     res['np'] = set_non_pos_string(data['np'], length)
    # if data.get('ip'):
    #     res['ip'] = set_pos_string(data['ip'], length)
    # pprint(res)
    print(len(abc))
    print(*abc[:50], sep='\n')
    # pprint(abc)




@dp.callback_query()
async def any_callback(callback: CallbackQuery):
    print(callback.data)


@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    pprint(message.model_dump_json(indent=4, exclude_none=True))
    await message.answer('help command')


@dp.my_chat_member()
async def all(chatmemberupdated: ChatMemberUpdated):
    # pprint(message.model_dump_json(indent=4, exclude_none=True))
    if await check_exist_user(_db, chatmemberupdated.from_user.id) and chatmemberupdated.new_chat_member.status == 'kicked':
        await update_status_user(_db, chatmemberupdated)
        print('–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    # await message.answer('my_chat_member')


if __name__ == "__main__":
    dp.run_polling(bot)
